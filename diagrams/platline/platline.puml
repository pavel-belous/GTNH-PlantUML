@startuml
scale 1
'skinparam linetype polyline
'skinparam linetype ortho
left to right direction
skinparam rectangle {
    BackgroundColor<<HV>> #ADABBC
    BackgroundColor<<EV>> #D79DE4
    BackgroundColor<<IV>> #625D98
}
<style>
    title {
        HorizontalAlignment center
    }
</style>

' debug flag
' %true() - display ports names, useful for creating connections
' %false() - dont display port names
!$DEBUG = %true()
!$fromMainStorage = "#green;line.dotted;text:green : import"
!$backToMainStorage = "#blue;line.dotted;text:blue : export"
!$voided = "#red;line.dotted;text:red : void"

'-----------Functions--------------------------------------------
!function $getGTcircuitImage($circuitNo=0)
   !return "<img:../../lib/resources/gregtech/textures/items/gt.integrated_circuit/upscale/"+$circuitNo+".png>"
!endfunction

'-----------Procedures-------------------------------------------

' Draws machines and their inputs/outputs using array from .json file.
' Connections are drawn by $drawConnections function.
' All connections are ordered and depends from their actual position in array of .json file.
' This leads to:
'   1. New machines MUST BE added to the end of the array in .json file,
'      otherwise existing connections will be broken.
'   2. You cant rearrange/add/remove existing machines or their inputs/outputs,
'      otherwise existing connections will be broken.
!procedure $drawMachines()
    !$fullMachineName = $machineName+$machineNumber
    !$machines = %load_json("platline.json")
    !$machineNumber = 0
    !$inputNumber = 0
    !$outputNumber = 0
    !$HVLCRCount = 0
    !$EVLCRCount = 0
    !$HVEBFCount = 0
    !$HVElectroCount = 0
    !$HVDTCount = 0
    !$IVDTCount = 0
    !$HVSifterCount = 0
    !$HVFluidSolidifierCount = 0
    !$HVMaceratorCount = 0
    !$HVMixerCount = 0
    !$HVOilCrackerCount = 0
    !$HVFluidExtractorCount = 0
    !$TotalMachinesCount = 0
    !foreach $machine in $machines
        !$machineNumber = $machineNumber + 1
        !$TotalMachinesCount = $TotalMachinesCount + 1
        !$fullMachineName = $machine.name + $machineNumber
        !$tier = $machine.tier
        !$circuit = $machine.circuit
        !$rectangleName = %string("rec"+$fullMachineName)
        !$countMachineName = $tier + " " + $machine.name
        !if ($countMachineName == "HV LCR")
            !$HVLCRCount = $HVLCRCount + 1
        !elseif ($countMachineName == "EV LCR")
            !$EVLCRCount = $EVLCRCount + 1
        !elseif ($countMachineName == "HV EBF")
            !$HVEBFCount = $HVEBFCount + 1
        !elseif ($countMachineName == "HV Electrolyzer")
            !$HVElectroCount = $HVElectroCount + 1
        !elseif ($countMachineName == "HV DT")
            !$HVDTCount = $HVDTCount + 1
        !elseif ($countMachineName == "IV DT")
            !$IVDTCount = $IVDTCount + 1
        !elseif ($countMachineName == "HV Sifter")
            !$HVSifterCount = $HVSifterCount + 1
        !elseif ($countMachineName == "HV FluidSolidifier")
            !$HVFluidSolidifierCount = $HVFluidSolidifierCount + 1
        !elseif ($countMachineName == "HV Macerator")
            !$HVMaceratorCount = $HVMaceratorCount + 1
        !elseif ($countMachineName == "HV Mixer")
            !$HVMixerCount = $HVMixerCount + 1
        !elseif ($countMachineName == "HV OilCracker")
            !$HVOilCrackerCount = $HVOilCrackerCount + 1
        !elseif ($countMachineName == "HV FluidExtractor")
            !$HVFluidExtractorCount = $HVFluidExtractorCount + 1
        !endif
        rectangle " " as $fullMachineName {
            rectangle "$machine.name\n$getGTcircuitImage($circuit)" <<$tier>>  as $rectangleName  {
            }
            !foreach $input in $machine.inputs
                !$inputNumber = $inputNumber + 1
                !$portInName = %string("pi"+$inputNumber)
                !if ($DEBUG)
                    portin "$portInName" as $portInName
                !else
                    portin " " as $portInName
                !endif
                $portInName --> $rectangleName: $input.name\n$input.amount
            !endfor

            !foreach $output in $machine.outputs
                !$outputNumber = $outputNumber + 1
                !$portOutName = %string("po"+$outputNumber)
                !if ($DEBUG)
                    portout "$portOutName" as $portOutName
                !else
                    portout " " as $portOutName
                !endif
                $rectangleName #----> $portOutName: $output.name\n$output.amount
            !endfor
      }
    !endfor
    rectangle machines [
        machines
        --
        | machine name              |     count     |
        |   HV LCR                  |   $HVLCRCount |
        |   EV LCR                  |   $EVLCRCount|
        |   HV EBF                  |   $HVEBFCount|
        |   HV Electrolyzer         |   $HVElectroCount|
        |   HV DT                   |   $HVDTCount|
        |   IV DT                   |   $IVDTCount|
        |   HV Sifter               |   $HVSifterCount|
        |   HV Fluid Solidifier     |   $HVFluidSolidifierCount|
        |   HV Macerator            |   $HVMaceratorCount|
        |   HV Mixer                |   $HVMixerCount|
        |   HV Oil Cracker          |   $HVOilCrackerCount|
        |   HV Fluid Extractor      |   $HVFluidExtractorCount|
        |   **total:**| ** $TotalMachinesCount **|
    ]
!endprocedure

' since PlantUML preprocessor doesnt have arrays manipulation
' there's no easy way to calculate and draw connections automatically
'
' "pi" is shortcut from PortIn which mean machine input
' "po" is shortcut from PortOut which mean machine output
' actual port names below can be seen on diagram after $DEBUG flag enabling
!procedure $drawConnections()
    'rhodium
    po1 --> pi4
    po2 --> pi6
    po4 --> pi8
    po7 --> pi9
    po9 --> pi12
    po13 --> pi15
    po14 --> pi18
    po15 --> pi21
    po19 --> pi22
    po20 --> pi24
    po21 --> pi25
    po17 --> pi17
    po10 -down-> pi10
    'recycle
    po8 .left.> pi11

    'palladium
    po25 --> pi28
    po26 --> pi29
    po28 -> pi43
    po29 --> pi36
    po32 --> pi37
    po33 --> pi44
    po34 ..> pi39
    po37 --> pi42
    po30 --> pi35
    po39 ..> pi33
    po38 --> pi38
    po36 --> pi41
    po35 --> pi40
    po27 .up.> pi28

    'ruthenium
    po44 --> pi48
    po46 --> pi51
    po47 --> pi52
    po50 --> pi53
    po51 --> pi54

    'rarest metal
    po45 --> pi56

    'osmium
    po56 --> pi58
    po57 --> pi59

    'iridium
    po55 --> pi61
    po62 --> pi62
    po64 --> pi64
    po65 --> pi66
    po69 --> pi68
    po70 --> pi69
    po71 ..> pi67

    'connect leach residue with iridium/osmium lines
    po3 -- pi45
    po5 -- pi45
    po75 --> pi47

    'potassium recycle
    po6 ..> pi70
    po73 --> pi71
    po74 --> pi1

!endprocedure

'import / export / void markers
!procedure $drawMarkers()
    po40    --> po40    $backToMainStorage
    po41    --> po41    $backToMainStorage
    po42    --> po42    $backToMainStorage
    po16    --> po16    $backToMainStorage
    po22    --> po22    $backToMainStorage
    po23    --> po23    $backToMainStorage
    po24    --> po24    $backToMainStorage
    po72    --> po72    $backToMainStorage
    po60    --> po60    $backToMainStorage
    po59    --> po59    $backToMainStorage
    po48    --> po48    $backToMainStorage
    po52    --> po52    $backToMainStorage
    po53    --> po53    $backToMainStorage
    po11    --> po11    $backToMainStorage
    po12    --> po12    $backToMainStorage
    po18    --> po18    $backToMainStorage
    po67    --> po67    $backToMainStorage
    po68    --> po68    $backToMainStorage
    po66    --> po66    $backToMainStorage
    pi20    --> pi20    $fromMainStorage
    pi19    --> pi19    $fromMainStorage
    pi16    --> pi16    $fromMainStorage
    pi13    --> pi13    $fromMainStorage
    pi14    --> pi14    $fromMainStorage
    pi31    --> pi31    $fromMainStorage
    pi32    --> pi32    $fromMainStorage
    pi27    --> pi27    $fromMainStorage
    pi34    --> pi34    $fromMainStorage
    pi30    --> pi30    $fromMainStorage
    pi63    --> pi63    $fromMainStorage
    pi60    --> pi60    $fromMainStorage
    pi50    --> pi50    $fromMainStorage
    pi49    --> pi49    $fromMainStorage
    pi57    --> pi57    $fromMainStorage
    pi46    --> pi46    $fromMainStorage
    pi7     --> pi7     $fromMainStorage
    pi72    --> pi72    $fromMainStorage
    pi73    --> pi73    $fromMainStorage
    pi2     --> pi2     $fromMainStorage
    pi3     --> pi3     $fromMainStorage
    pi5     --> pi5     $fromMainStorage
    pi23    --> pi23    $fromMainStorage
    pi55    --> pi55    $fromMainStorage
    pi26    --> pi26    $fromMainStorage
    pi65    --> pi65    $fromMainStorage
    po31    --> po31    $voided
    po43    --> po43    $voided
    po49    --> po49    $voided
    po61    --> po61    $voided
    po54    --> po54    $voided
!endprocedure
'-----------Draw Diagram Section---------------------------------
title
    Gregtech New Horizons 2.2.8
    IV-tier platinum processing line
endtitle

'header
'endheader

$drawMachines()
$drawConnections()
$drawMarkers()
@enduml